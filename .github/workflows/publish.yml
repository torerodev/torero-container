---
name: Build and Publish Container Image

on:
  release:
    types: [published]
  pull_request:
    branches: 
      - main
  workflow_dispatch:
    inputs:
      torero_version:
        description: 'torero version to build'
        required: true
        default: '1.4.0'
      python_version:
        description: 'Python version to install'
        required: true
        default: '3.13.0'
      tofu_version:
        description: 'OpenTofu version to build with'
        required: false
        default: '1.10.5'

  # rebuild weekly to keep things secure and up-to-date
  schedule:
    - cron: '0 2 * * 0'  # weekly on sundays at 2am

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: torerodev/torero-container
  DEFAULT_TORERO_VERSION: '1.4.0'  # Update this when new torero versions are released

jobs:

  # which platform?
  setup:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Set build matrix
        id: set-matrix
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            # PR builds: amd64 only
            echo 'matrix={"include":[{"platform":"linux/amd64","runner":"ubuntu-latest","build_args":"amd64"}]}' >> $GITHUB_OUTPUT
          else
            # Non-PR builds: both platforms
            echo 'matrix={"include":[{"platform":"linux/amd64","runner":"ubuntu-latest","build_args":"amd64"},{"platform":"linux/arm64","runner":"ubuntu-latest-arm64-4-cores","build_args":"arm64"}]}' >> $GITHUB_OUTPUT
          fi

  build-and-push:
    needs: setup
    strategy:
      matrix: ${{ fromJSON(needs.setup.outputs.matrix) }}

    runs-on: ${{ matrix.runner }}
    permissions:
      contents: read
      packages: write
      security-events: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Log in to GHCR
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Determine versions
        id: versions
        run: |
          echo "Event: ${{ github.event_name }}"
          echo "Release tag: ${{ github.event.release.tag_name || 'N/A' }}"
          
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "torero_version=${{ github.event.inputs.torero_version }}" >> $GITHUB_OUTPUT
            echo "python_version=${{ github.event.inputs.python_version }}" >> $GITHUB_OUTPUT
            echo "tofu_version=${{ github.event.inputs.tofu_version }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "release" ]]; then
            # Use default torero version
            echo "Using default torero version: ${{ env.DEFAULT_TORERO_VERSION }}"
            echo "torero_version=${{ env.DEFAULT_TORERO_VERSION }}" >> $GITHUB_OUTPUT
            echo "python_version=3.13.0" >> $GITHUB_OUTPUT  # default python version for releases
            echo "tofu_version=1.10.5" >> $GITHUB_OUTPUT  # default opentofu version for releases
          else
            echo "torero_version=${{ env.DEFAULT_TORERO_VERSION }}" >> $GITHUB_OUTPUT
            echo "python_version=3.13.0" >> $GITHUB_OUTPUT  # default python version for other builds
            echo "tofu_version=1.10.5" >> $GITHUB_OUTPUT  # default opentofu version for other builds
          fi
          
          echo "Final torero_version: $(grep torero_version $GITHUB_OUTPUT | cut -d= -f2)"
      
      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
      
      - name: Set image tags
        id: meta
        run: |
          # For pull requests, use a test tag
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "image_tags=local-test:pr-${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
          else
            # Determine container version for tagging
            if [[ "${{ github.event_name }}" == "release" ]]; then
              CONTAINER_VERSION="${{ github.event.release.tag_name }}"
              CONTAINER_VERSION="${CONTAINER_VERSION#v}"
            elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
              # For manual runs, use torero version as container version
              CONTAINER_VERSION="${{ steps.versions.outputs.torero_version }}"
            else
              CONTAINER_VERSION="latest"
            fi
            
            # For releases and workflow dispatch, tag with architecture suffix
            ARCH_SUFFIX="-${{ matrix.build_args }}"
            TAGS="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${CONTAINER_VERSION}${ARCH_SUFFIX}"
            
            echo "image_tags=$TAGS" >> $GITHUB_OUTPUT
            echo "container_version=${CONTAINER_VERSION}" >> $GITHUB_OUTPUT
          fi
      
      - name: Build and tag Docker image
        id: docker_build
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Containerfile

          # don't push for PRs, only push for releases or manual workflow
          push: ${{ github.event_name != 'pull_request' }}

          # load into Docker daemon for PR builds so tests can run
          # Only build for the current platform
          load: false
          platforms: ${{ matrix.platform }}
          tags: ${{ steps.meta.outputs.image_tags }}
          labels: |
            org.opencontainers.image.source=https://github.com/torerodev/docker-torero
            org.opencontainers.image.created=${{ github.event.repository.updated_at }}
            org.opencontainers.image.revision=${{ github.sha }}
          build-args: |
            TORERO_VERSION=${{ steps.versions.outputs.torero_version }}
            PYTHON_VERSION=${{ steps.versions.outputs.python_version }}
            TOFU_VERSION=${{ steps.versions.outputs.tofu_version }}
          cache-from: type=gha,scope=${{ matrix.platform }}
          cache-to: type=gha,mode=max,scope=${{ matrix.platform }}
      
      - name: Run basic tests
        run: |
          # for PRs, build a single-platform test image
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "Building single-platform test image for PR validation..."
            docker build -f Containerfile -t pr-test:${{ github.event.pull_request.number }} \
              --build-arg TORERO_VERSION=${{ steps.versions.outputs.torero_version }} \
              --build-arg PYTHON_VERSION=${{ steps.versions.outputs.python_version }} \
              --build-arg TOFU_VERSION=${{ steps.versions.outputs.tofu_version }} .
            TEST_IMAGE="pr-test:${{ github.event.pull_request.number }}"
          else
            # For releases, the image should be available in the registry
            # Use the actual container version tag, not torero version
            TEST_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.container_version }}-${{ matrix.build_args }}"
          fi
          
          # test torero
          docker run --rm $TEST_IMAGE torero version
          
          # test python installation
          docker run --rm $TEST_IMAGE python3 --version
      
      - name: test OpenTofu pre-installation
        run: |
          # For PRs, use the test image we built
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            TEST_IMAGE="pr-test:${{ github.event.pull_request.number }}"
          else
            TEST_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.container_version }}-${{ matrix.build_args }}"
          fi
          
          # test that OpenTofu is pre-installed at build time
          docker run --rm $TEST_IMAGE tofu version
      
      - name: run vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ github.event_name == 'pull_request' && format('pr-test:{0}', github.event.pull_request.number) || format('{0}/{1}:{2}', env.REGISTRY, env.IMAGE_NAME, steps.versions.outputs.torero_version) }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
      
      - name: upload vulnerability report
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

        # only run this step with proper permissions
        if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository

  # combine multi-arch images (only for non-PR builds)
  combine-images:
    if: github.event_name != 'pull_request'
    needs: build-and-push
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Determine versions
        id: versions
        run: |
          # Determine container version for manifest
          if [[ "${{ github.event_name }}" == "release" ]]; then
            CONTAINER_VERSION="${{ github.event.release.tag_name }}"
            CONTAINER_VERSION="${CONTAINER_VERSION#v}"
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # For manual runs, use torero version as container version
            CONTAINER_VERSION="${{ github.event.inputs.torero_version }}"
          else
            CONTAINER_VERSION="latest"
          fi
          echo "container_version=${CONTAINER_VERSION}" >> $GITHUB_OUTPUT
      
      - name: Create and push manifest
        run: |
          # Create multi-arch manifest
          docker buildx imagetools create \
            -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.versions.outputs.container_version }} \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.versions.outputs.container_version }}-amd64 \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.versions.outputs.container_version }}-arm64
          
          # Also tag as latest for releases
          if [[ "${{ github.event_name }}" == "release" ]] || [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            docker buildx imagetools create \
              -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.versions.outputs.container_version }}-amd64 \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.versions.outputs.container_version }}-arm64
          fi
...